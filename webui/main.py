import streamlit as st
import requests
import os

API_BASE_URL = os.getenv("API_BASE_URL", "http://localhost:8000/api/v1")

if not st.session_state.get("access_token"):
    st.session_state.access_token = None

st.title("üõçÔ∏è Marketplace Price Optimization")
st.markdown("**–°–∏—Å—Ç–µ–º–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ü–µ–Ω –¥–ª—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ ML**")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
st.sidebar.title("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
page = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", [
    "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è",
    "–¢–æ–≤–∞—Ä—ã",
    "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã",
    "–ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω"
])

# === –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø ===
if page == "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è":
    st.header("üîê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–º")

    col1, col2 = st.columns(2)

    with col1:
        st.subheader("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
        reg_email = st.text_input("Email:", key="reg_email")
        reg_password = st.text_input("–ü–∞—Ä–æ–ª—å:", type="password", key="reg_password")

        if st.button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"):
            if reg_email and reg_password:
                try:
                    response = requests.post(f"{API_BASE_URL}/users/", json={
                        "email": reg_email,
                        "password": reg_password
                    })
                    response.raise_for_status()
                    st.success("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            else:
                st.warning("‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")

    with col2:
        st.subheader("–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
        email = st.text_input("Email:", key="login_email")
        password = st.text_input("–ü–∞—Ä–æ–ª—å:", type="password", key="login_password")

        if st.button("–í–æ–π—Ç–∏"):
            if email and password:
                try:
                    response = requests.post(f"{API_BASE_URL}/users/auth/", json={
                        "email": email,
                        "password": password
                    })
                    response.raise_for_status()
                    token_data = response.json()
                    st.session_state.access_token = token_data["access_token"]
                    st.success("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è!")
                    st.rerun()
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {e}")
            else:
                st.warning("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å")

    if st.session_state.access_token:
        st.success("üü¢ –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
        if st.button("–í—ã–π—Ç–∏"):
            st.session_state.access_token = None
            st.rerun()
    else:
        st.warning("üî¥ –í–æ–π–¥–∏—Ç–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º")

# === –¢–û–í–ê–†–´ ===
elif page == "–¢–æ–≤–∞—Ä—ã":
    st.header("üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏")

    if not st.session_state.access_token:
        st.error("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
        st.stop()

    headers = {"Authorization": f"Bearer {st.session_state.access_token}"}

    tab1, tab2 = st.tabs(["–ú–æ–∏ —Ç–æ–≤–∞—Ä—ã", "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"])

    with tab1:
        if st.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã"):
            try:
                response = requests.get(f"{API_BASE_URL}/products/", headers=headers)
                response.raise_for_status()
                products = response.json()

                if products:
                    for product in products:
                        with st.container():
                            st.markdown(f"**{product['name']}**")
                            st.write(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product['category_name']}")
                            st.write(f"–ë—Ä–µ–Ω–¥: {product['brand_name']}")
                            st.write(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {product['item_condition_id']}/5")
                            if product["current_price"]:
                                st.metric("–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞", f"${product['current_price']:.2f}")
                            st.divider()
                else:
                    st.info("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤")
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    with tab2:
        with st.form("add_product"):
            name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞*:")
            description = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ:")
            category = st.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏—è:", [
                "Electronics", "Fashion", "Home", "Books", "Sports", "Other"
            ])
            brand = st.text_input("–ë—Ä–µ–Ω–¥:", value="Unknown")
            condition = st.slider("–°–æ—Å—Ç–æ—è–Ω–∏–µ (1=–Ω–æ–≤—ã–π, 5=–ø–ª–æ—Ö–æ–µ):", 1, 5, 1)
            shipping = st.radio("–î–æ—Å—Ç–∞–≤–∫–∞:", ["–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–ª–∞—Ç–∏—Ç", "–ü—Ä–æ–¥–∞–≤–µ—Ü –ø–ª–∞—Ç–∏—Ç"])

            if st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"):
                if name and category:
                    try:
                        product_data = {
                            "name": name,
                            "item_description": description,
                            "category_name": category,
                            "brand_name": brand,
                            "item_condition_id": condition,
                            "shipping": 1 if shipping == "–ü—Ä–æ–¥–∞–≤–µ—Ü –ø–ª–∞—Ç–∏—Ç" else 0
                        }
                        response = requests.post(
                            f"{API_BASE_URL}/products/",
                            json=product_data,
                            headers=headers
                        )
                        response.raise_for_status()
                        st.success("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!")
                    except Exception as e:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                else:
                    st.warning("‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")

# === –ü–†–û–ì–ù–û–ó–ò–†–û–í–ê–ù–ò–ï –¶–ï–ù–´ ===
elif page == "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã":
    st.header("ü§ñ ML –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã")

    if not st.session_state.access_token:
        st.error("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
        st.stop()

    headers = {"Authorization": f"Bearer {st.session_state.access_token}"}

    st.info("üí° –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞: $5.00")

    with st.form("predict_price"):
        name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞*:")
        description = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
        category = st.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏—è:", [
            "Electronics", "Fashion", "Home & Garden", "Books", "Sports & Outdoors",
            "Beauty", "Kids & Baby", "Automotive", "Other"
        ])
        brand = st.text_input("–ë—Ä–µ–Ω–¥:", value="Unknown")
        condition = st.slider("–°–æ—Å—Ç–æ—è–Ω–∏–µ (1=–Ω–æ–≤—ã–π, 5=–ø–ª–æ—Ö–æ–µ):", 1, 5, 1)
        shipping = st.radio("–ö—Ç–æ –ø–ª–∞—Ç–∏—Ç –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É:", ["–ü–æ–∫—É–ø–∞—Ç–µ–ª—å", "–ü—Ä–æ–¥–∞–≤–µ—Ü"])

        if st.form_submit_button("üîÆ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã"):
            if name and category:
                try:
                    product_data = {
                        "name": name,
                        "item_description": description,
                        "category_name": category,
                        "brand_name": brand,
                        "item_condition_id": condition,
                        "shipping": 1 if shipping == "–ü—Ä–æ–¥–∞–≤–µ—Ü" else 0
                    }

                    with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–æ–≤–∞—Ä –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É—é —Ü–µ–Ω—É..."):
                        response = requests.post(
                            f"{API_BASE_URL}/products/pricing/predict/",
                            json={"product_data": product_data},
                            headers=headers
                        )
                        response.raise_for_status()
                        result = response.json()

                    st.success("‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ –≥–æ—Ç–æ–≤!")

                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.metric("üí∞ –ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã", f"${result['predicted_price']:.2f}")
                    with col2:
                        st.metric("üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", f"{result['confidence_score']:.1%}")
                    with col3:
                        price_range = result["price_range"]
                        st.metric("üìä –î–∏–∞–ø–∞–∑–æ–Ω", f"${price_range['min']:.2f} - ${price_range['max']:.2f}")

                    if "category_analysis" in result:
                        st.write("üìà **–ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:**")
                        for key, value in result["category_analysis"].items():
                            st.write(f"‚Ä¢ {key}: {value}")

                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            else:
                st.warning("‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é")

# === –ê–ù–ê–õ–ò–ó –¶–ï–ù ===
elif page == "–ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω":
    st.header("üìä –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω–æ–≤—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫")

    if not st.session_state.access_token:
        st.error("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
        st.stop()

    headers = {"Authorization": f"Bearer {st.session_state.access_token}"}

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ
    try:
        response = requests.get(f"{API_BASE_URL}/products/pricing/info/")
        if response.status_code == 200:
            info = response.json()
            st.success("ü§ñ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ ML –º–æ–¥–µ–ª–∏:**")
            st.write(f"‚Ä¢ –¢–∏–ø –º–æ–¥–µ–ª–∏: {info.get('model_type', 'N/A')}")
            st.write(f"‚Ä¢ –í–µ—Ä—Å–∏—è: {info.get('version', 'N/A')}")
            st.write(f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {info.get('features_count', 'N/A')}")
    except:
        pass

    st.subheader("üîç –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞")

    with st.form("analyze_product"):
        name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
        description = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ:")
        category = st.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏—è:", [
            "Electronics", "Fashion", "Home", "Books", "Sports", "Other"
        ])

        if st.form_submit_button("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å"):
            if name:
                try:
                    product_data = {
                        "name": name,
                        "item_description": description,
                        "category_name": category,
                        "brand_name": "Unknown",
                        "item_condition_id": 1,
                        "shipping": 0
                    }

                    response = requests.post(
                        f"{API_BASE_URL}/products/pricing/analyze/",
                        json={"product_data": product_data},
                        headers=headers
                    )
                    response.raise_for_status()
                    analysis = response.json()

                    st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
                    st.json(analysis)

                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# === –§–£–¢–ï–† ===
st.markdown("---")
st.markdown("üõçÔ∏è **Marketplace Price Optimization** | Powered by CatBoost ML")
