import streamlit as st
import requests
import os
import pandas as pd
import io

API_BASE_URL = os.getenv("API_BASE_URL", "http://localhost:8000/api/v1")

if not st.session_state.get("access_token"):
    st.session_state.access_token = None

st.title("üõçÔ∏è Marketplace Price Optimization")
st.markdown("**–°–∏—Å—Ç–µ–º–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ü–µ–Ω –¥–ª—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ ML**")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
st.sidebar.title("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
page = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", [
    "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è",
    "–ë–∞–ª–∞–Ω—Å –∏ —Ç–∞—Ä–∏—Ñ—ã",
    "–¢–æ–≤–∞—Ä—ã",
    "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã",
    "–ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω"
])

# === –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø ===
if page == "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è":
    st.header("üîê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–º")

    col1, col2 = st.columns(2)

    with col1:
        st.subheader("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
        reg_email = st.text_input("Email:", key="reg_email")
        reg_password = st.text_input("–ü–∞—Ä–æ–ª—å:", type="password", key="reg_password")

        if st.button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"):
            if reg_email and reg_password:
                try:
                    response = requests.post(f"{API_BASE_URL}/users/", json={
                        "email": reg_email,
                        "password": reg_password
                    })
                    response.raise_for_status()
                    st.success("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            else:
                st.warning("‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")

    with col2:
        st.subheader("–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
        email = st.text_input("Email:", key="login_email")
        password = st.text_input("–ü–∞—Ä–æ–ª—å:", type="password", key="login_password")

        if st.button("–í–æ–π—Ç–∏"):
            if email and password:
                try:
                    response = requests.post(f"{API_BASE_URL}/users/auth/", json={
                        "email": email,
                        "password": password
                    })
                    response.raise_for_status()
                    token_data = response.json()
                    st.session_state.access_token = token_data["access_token"]
                    st.success("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è!")
                    st.rerun()
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {e}")
            else:
                st.warning("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å")

    if st.session_state.access_token:
        st.success("üü¢ –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
        if st.button("–í—ã–π—Ç–∏"):
            st.session_state.access_token = None
            st.rerun()
    else:
        st.warning("üî¥ –í–æ–π–¥–∏—Ç–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º")

# === –ë–ê–õ–ê–ù–° –ò –¢–ê–†–ò–§–´ ===
elif page == "–ë–∞–ª–∞–Ω—Å –∏ —Ç–∞—Ä–∏—Ñ—ã":
    st.header("üí∞ –ë–∞–ª–∞–Ω—Å –∏ —Ç–∞—Ä–∏—Ñ—ã")

    if not st.session_state.access_token:
        st.error("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
        st.stop()

    headers = {"Authorization": f"Bearer {st.session_state.access_token}"}

    col1, col2 = st.columns(2)

    with col1:
        st.subheader("üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ session_state
        if "balance" not in st.session_state:
            st.session_state.balance = None
        if "add_amount" not in st.session_state:
            st.session_state.add_amount = 10.00
        
        if st.button("–û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å", key="refresh_balance"):
            try:
                response = requests.get(f"{API_BASE_URL}/users/balance/", headers=headers)
                response.raise_for_status()
                balance_data = response.json()
                st.session_state.balance = balance_data['balance']
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
        if st.session_state.balance is not None:
            st.metric("–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å", f"${st.session_state.balance}")

        # –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
        st.subheader("üíµ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
        add_amount = st.number_input(
            "–°—É–º–º–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ($):", 
            min_value=0.01, 
            value=st.session_state.add_amount, 
            step=0.01,
            key="add_amount_input"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º session_state
        st.session_state.add_amount = add_amount
        
        if st.button("–ü–æ–ø–æ–ª–Ω–∏—Ç—å", key="add_balance"):
            try:
                response = requests.post(f"{API_BASE_URL}/users/balance/add/?amount={add_amount}", headers=headers)
                response.raise_for_status()
                result = response.json()
                st.success(f"‚úÖ {result['message']}")
                # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ session_state
                st.session_state.balance = result['balance']
                st.rerun()
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    with col2:
        st.subheader("üìã –¢–∞—Ä–∏—Ñ—ã")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞—Ä–∏—Ñ—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if "tariffs" not in st.session_state:
            try:
                response = requests.get(f"{API_BASE_URL}/users/tariffs/", headers=headers)
                response.raise_for_status()
                st.session_state.tariffs = response.json()
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞—Ä–∏—Ñ–æ–≤: {e}")
                st.session_state.tariffs = None
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞—Ä–∏—Ñ—ã
        if st.session_state.tariffs:
            tariffs = st.session_state.tariffs
            st.info(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞: ${tariffs['single_item_price']}")
            st.info(f"üéØ –°–∫–∏–¥–∫–∞ –ø—Ä–∏ {tariffs['bulk_discount_threshold']}+ —Ç–æ–≤–∞—Ä–∞—Ö: {tariffs['bulk_discount_percent']}%")
            st.info(f"üì¶ –ú–∞–∫—Å–∏–º—É–º —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–ø—Ä–æ—Å–µ: {tariffs['max_items_per_request']}")
            
            # –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏
            st.subheader("üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ session_state
            if "items_count" not in st.session_state:
                st.session_state.items_count = 1
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º key –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
            items_count = st.number_input(
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤:", 
                min_value=1, 
                max_value=100, 
                value=st.session_state.items_count,
                key="items_count_input"
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º session_state
            st.session_state.items_count = items_count
            
            if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å", key="calculate_cost"):
                try:
                    cost_response = requests.post(f"{API_BASE_URL}/users/calculate-cost/?items_count={items_count}", headers=headers)
                    cost_response.raise_for_status()
                    cost_data = cost_response.json()
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ session_state
                    st.session_state.cost_result = cost_data
                    
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if "cost_result" in st.session_state:
                cost_data = st.session_state.cost_result
                col_a, col_b = st.columns(2)
                with col_a:
                    st.metric("–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å", f"${cost_data['cost']}")
                with col_b:
                    st.metric("–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ —Ç–æ–≤–∞—Ä", f"${cost_data['cost_per_item']}")
        else:
            st.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–∞—Ä–∏—Ñ—ã")

# === –¢–û–í–ê–†–´ ===
elif page == "–¢–æ–≤–∞—Ä—ã":
    st.header("üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏")

    if not st.session_state.access_token:
        st.error("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
        st.stop()

    headers = {"Authorization": f"Bearer {st.session_state.access_token}"}

    tab1, tab2, tab3 = st.tabs(["–ú–æ–∏ —Ç–æ–≤–∞—Ä—ã", "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", "–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ Excel"])

    with tab1:
        if st.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã"):
            try:
                response = requests.get(f"{API_BASE_URL}/products/", headers=headers)
                response.raise_for_status()
                products = response.json()

                if products:
                    st.session_state.user_products = products
                    
                    for product in products:
                        with st.container():
                            col1, col2 = st.columns([3, 1])
                            with col1:
                                st.markdown(f"**{product['name']}**")
                                st.write(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product['category_name']}")
                                st.write(f"–ë—Ä–µ–Ω–¥: {product['brand_name']}")
                                st.write(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {product['item_condition_id']}/5")
                                if product["current_price"]:
                                    st.metric("–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞", f"${product['current_price']:.2f}")
                            with col2:
                                st.write(f"ID: {product['id']}")
                            st.divider()
                else:
                    st.info("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤")
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    with tab2:
        with st.form("add_product"):
            name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞*:")
            description = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ:")
            category = st.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏—è:", [
                "Electronics", "Fashion", "Home", "Books", "Sports", "Other"
            ])
            brand = st.text_input("–ë—Ä–µ–Ω–¥:", value="Unknown")
            condition = st.slider("–°–æ—Å—Ç–æ—è–Ω–∏–µ (1=–Ω–æ–≤—ã–π, 5=–ø–ª–æ—Ö–æ–µ):", 1, 5, 1)
            shipping = st.radio("–î–æ—Å—Ç–∞–≤–∫–∞:", ["–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–ª–∞—Ç–∏—Ç", "–ü—Ä–æ–¥–∞–≤–µ—Ü –ø–ª–∞—Ç–∏—Ç"])

            if st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"):
                if name and category:
                    try:
                        product_data = {
                            "name": name,
                            "item_description": description,
                            "category_name": category,
                            "brand_name": brand,
                            "item_condition_id": condition,
                            "shipping": 1 if shipping == "–ü—Ä–æ–¥–∞–≤–µ—Ü –ø–ª–∞—Ç–∏—Ç" else 0
                        }
                        response = requests.post(
                            f"{API_BASE_URL}/products/",
                            json=product_data,
                            headers=headers
                        )
                        response.raise_for_status()
                        st.success("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!")
                    except Exception as e:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                else:
                    st.warning("‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")

    with tab3:
        st.subheader("üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ Excel")
        
        # –°–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω
        try:
            response = requests.get(f"{API_BASE_URL}/users/products/template/")
            response.raise_for_status()
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º st.download_button –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω Excel",
                data=response.content,
                file_name="products_template.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                help="–°–∫–∞—á–∞–π—Ç–µ —à–∞–±–ª–æ–Ω, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –æ–±—Ä–∞—Ç–Ω–æ"
            )
            st.info("üìù –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —à–∞–±–ª–æ–Ω –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –æ–±—Ä–∞—Ç–Ω–æ")
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞: {e}")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
        uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ Excel —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏", type=['xlsx', 'xls'])
        
        if uploaded_file is not None:
            if st.button("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã"):
                try:
                    files = {"file": uploaded_file}
                    response = requests.post(
                        f"{API_BASE_URL}/products/upload-excel/",
                        files=files,
                        headers=headers
                    )
                    response.raise_for_status()
                    result = response.json()
                    
                    st.success(f"‚úÖ {result['message']}")
                    st.info(f"üìä –°–æ–∑–¥–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {result['created_count']}")
                    
                    if result['errors']:
                        st.warning("‚ö†Ô∏è –û—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ:")
                        for error in result['errors']:
                            st.write(f"‚Ä¢ {error}")
                            
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# === –ü–†–û–ì–ù–û–ó–ò–†–û–í–ê–ù–ò–ï –¶–ï–ù–´ ===
elif page == "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã":
    st.header("ü§ñ ML –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã")

    if not st.session_state.access_token:
        st.error("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
        st.stop()

    headers = {"Authorization": f"Bearer {st.session_state.access_token}"}

    tab1, tab2 = st.tabs(["–û–¥–∏–Ω–æ—á–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑", "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑"])

    with tab1:
        st.info("üí° –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞: $5.00")

        with st.form("predict_price"):
            name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞*:")
            description = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
            category = st.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏—è:", [
                "Electronics", "Fashion", "Home & Garden", "Books", "Sports & Outdoors",
                "Beauty", "Kids & Baby", "Automotive", "Other"
            ])
            brand = st.text_input("–ë—Ä–µ–Ω–¥:", value="Unknown")
            condition = st.slider("–°–æ—Å—Ç–æ—è–Ω–∏–µ (1=–Ω–æ–≤—ã–π, 5=–ø–ª–æ—Ö–æ–µ):", 1, 5, 1)
            shipping = st.radio("–ö—Ç–æ –ø–ª–∞—Ç–∏—Ç –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É:", ["–ü–æ–∫—É–ø–∞—Ç–µ–ª—å", "–ü—Ä–æ–¥–∞–≤–µ—Ü"])

            if st.form_submit_button("üîÆ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã"):
                if name and category:
                    try:
                        product_data = {
                            "name": name,
                            "item_description": description,
                            "category_name": category,
                            "brand_name": brand,
                            "item_condition_id": condition,
                            "shipping": 1 if shipping == "–ü—Ä–æ–¥–∞–≤–µ—Ü" else 0
                        }

                        with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–æ–≤–∞—Ä –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É—é —Ü–µ–Ω—É..."):
                            response = requests.post(
                                f"{API_BASE_URL}/products/pricing/predict/",
                                json={"product_data": product_data},
                                headers=headers
                            )
                            response.raise_for_status()
                            result = response.json()

                        st.success("‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ –≥–æ—Ç–æ–≤!")

                        col1, col2, col3 = st.columns(3)
                        with col1:
                            st.metric("üí∞ –ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã", f"${result['predicted_price']:.2f}")
                        with col2:
                            st.metric("üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", f"{result['confidence_score']:.1%}")
                        with col3:
                            price_range = result["price_range"]
                            st.metric("üìä –î–∏–∞–ø–∞–∑–æ–Ω", f"${price_range['min']:.2f} - ${price_range['max']:.2f}")

                        if "category_analysis" in result:
                            st.subheader("üìà –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
                            analysis = result["category_analysis"]
                            st.write(f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {analysis.get('category', 'N/A')}")
                            st.write(f"**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** {analysis.get('recommendation', 'N/A')}")
                            st.write(f"**–ü–æ–∑–∏—Ü–∏—è –Ω–∞ —Ä—ã–Ω–∫–µ:** {analysis.get('market_position', 'N/A')}")

                    except Exception as e:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                else:
                    st.warning("‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")

    with tab2:
        st.subheader("üì¶ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        if "user_products" not in st.session_state:
            try:
                response = requests.get(f"{API_BASE_URL}/products/", headers=headers)
                response.raise_for_status()
                st.session_state.user_products = response.json()
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
                st.stop()
        
        if st.session_state.user_products:
            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
            product_options = {f"{p['name']} (ID: {p['id']})": p['id'] for p in st.session_state.user_products}
            
            selected_products = st.multiselect(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è:",
                options=list(product_options.keys()),
                help="–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤. –°—Ç–æ–∏–º–æ—Å—Ç—å: $5 –∑–∞ —Ç–æ–≤–∞—Ä"
            )
            
            if selected_products:
                product_ids = [product_options[name] for name in selected_products]
                st.info(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è: ${len(product_ids) * 5.00}")
                
                if st.button("üîÆ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã"):
                    try:
                        with st.spinner(f"–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É—é —Ü–µ–Ω—ã –¥–ª—è {len(product_ids)} —Ç–æ–≤–∞—Ä–æ–≤..."):
                            response = requests.post(
                                f"{API_BASE_URL}/products/pricing/predict-multiple/",
                                json=product_ids,
                                headers=headers
                            )
                            response.raise_for_status()
                            result = response.json()
                        
                        st.success(f"‚úÖ {result['message']}")
                        st.info(f"üí≥ –°–ø–∏—Å–∞–Ω–æ: ${result['charged_amount']}")
                        st.info(f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${result['new_balance']}")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                        st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è")
                        
                        for item in result['results']:
                            with st.container():
                                col1, col2, col3 = st.columns([2, 1, 1])
                                with col1:
                                    st.write(f"**{item['product_name']}**")
                                with col2:
                                    prediction = item['prediction']
                                    st.metric("–¶–µ–Ω–∞", f"${prediction['predicted_price']:.2f}")
                                with col3:
                                    st.metric("–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", f"{prediction['confidence_score']:.1%}")
                                st.divider()
                        
                        # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
                        try:
                            export_response = requests.post(
                                f"{API_BASE_URL}/products/pricing/export-results/",
                                json=result['results'],
                                headers=headers
                            )
                            export_response.raise_for_status()
                            
                            filename = f"price_predictions_{len(product_ids)}_items.xlsx"
                            st.download_button(
                                label="üì• –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel",
                                data=export_response.content,
                                file_name=filename,
                                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                                help="–°–∫–∞—á–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Excel"
                            )
                        except Exception as e:
                            st.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
                                
                    except Exception as e:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        else:
            st.info("üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ —Ä–∞–∑–¥–µ–ª–µ '–¢–æ–≤–∞—Ä—ã'")

# === –ê–ù–ê–õ–ò–ó –¶–ï–ù ===
elif page == "–ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω":
    st.header("üìä –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω")

    if not st.session_state.access_token:
        st.error("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
        st.stop()

    headers = {"Authorization": f"Bearer {st.session_state.access_token}"}

    st.info("üí° –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω–æ–≤—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Ç–æ–≤–∞—Ä–∞ (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)")

    with st.form("analyze_price"):
        name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞*:")
        description = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
        category = st.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏—è:", [
            "Electronics", "Fashion", "Home & Garden", "Books", "Sports & Outdoors",
            "Beauty", "Kids & Baby", "Automotive", "Other"
        ])
        brand = st.text_input("–ë—Ä–µ–Ω–¥:", value="Unknown")
        condition = st.slider("–°–æ—Å—Ç–æ—è–Ω–∏–µ (1=–Ω–æ–≤—ã–π, 5=–ø–ª–æ—Ö–æ–µ):", 1, 5, 1)
        shipping = st.radio("–ö—Ç–æ –ø–ª–∞—Ç–∏—Ç –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É:", ["–ü–æ–∫—É–ø–∞—Ç–µ–ª—å", "–ü—Ä–æ–¥–∞–≤–µ—Ü"])

        if st.form_submit_button("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä"):
            if name and category:
                try:
                    product_data = {
                        "name": name,
                        "item_description": description,
                        "category_name": category,
                        "brand_name": brand,
                        "item_condition_id": condition,
                        "shipping": 1 if shipping == "–ü—Ä–æ–¥–∞–≤–µ—Ü" else 0
                    }

                    with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–æ–≤–∞—Ä..."):
                        response = requests.post(
                            f"{API_BASE_URL}/products/pricing/analyze/",
                            json={"product_data": product_data},
                            headers=headers
                        )
                        response.raise_for_status()
                        result = response.json()

                    st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤!")

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
                    if "features" in result:
                        st.subheader("üîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
                        features = result["features"]
                        
                        col1, col2 = st.columns(2)
                        with col1:
                            st.write("**–¢–µ–∫—Å—Ç–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏:**")
                            st.write(f"‚Ä¢ –î–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è: {features.get('name_length', 0)} —Å–∏–º–≤–æ–ª–æ–≤")
                            st.write(f"‚Ä¢ –î–ª–∏–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è: {features.get('description_length', 0)} —Å–∏–º–≤–æ–ª–æ–≤")
                            st.write(f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏: {features.get('name_words', 0)}")
                            st.write(f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏: {features.get('description_words', 0)}")
                        
                        with col2:
                            st.write("**–ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏:**")
                            st.write(f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {features.get('category', 'N/A')}")
                            st.write(f"‚Ä¢ –ë—Ä–µ–Ω–¥: {features.get('brand', 'N/A')}")
                            st.write(f"‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {features.get('condition_text', 'N/A')}")
                            st.write(f"‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞: {'–ü—Ä–æ–¥–∞–≤–µ—Ü –ø–ª–∞—Ç–∏—Ç' if features.get('shipping', 0) == 1 else '–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–ª–∞—Ç–∏—Ç'}")

                    if "category_analysis" in result:
                        st.subheader("üìä –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
                        category_analysis = result["category_analysis"]
                        st.write(f"**–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω:** {category_analysis.get('price_range', 'N/A')}")
                        st.write(f"**–ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã:** {', '.join(category_analysis.get('key_factors', []))}")
                        st.write(f"**–°–æ–≤–µ—Ç:** {category_analysis.get('tips', 'N/A')}")

                    if "recommendations" in result:
                        st.subheader("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
                        recommendations = result["recommendations"]
                        for rec in recommendations:
                            st.write(f"‚Ä¢ {rec}")

                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            else:
                st.warning("‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")

# === –§–£–¢–ï–† ===
st.markdown("---")
st.markdown("üõçÔ∏è **Marketplace Price Optimization** | Powered by CatBoost ML")
