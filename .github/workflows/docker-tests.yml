name: Docker Integration Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  docker-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Cache Docker layers
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Create models directory
      run: |
        mkdir -p models
        # Create dummy model files for tests
        echo "dummy model content" > models/catboost_pricing_model.cbm
        echo "dummy pipeline content" > models/preprocessing_pipeline.pkl

    - name: Build Docker images
      id: build
      continue-on-error: true
      run: |
        docker compose build api ml-worker
        echo "status=$?" >> $GITHUB_OUTPUT

    - name: Start services
      id: start_services
      continue-on-error: true
      if: always()
      run: |
        docker compose up -d db redis rabbitmq
        
        # Wait for services to be ready
        echo "Waiting for services to start..."
        sleep 30
        
        # Check service health
        docker compose ps
        echo "status=$?" >> $GITHUB_OUTPUT

    - name: Run tests in Docker
      id: docker_tests
      continue-on-error: true
      if: always()
      run: |
        docker compose run --rm api pytest src/tests/ -v --tb=short
        echo "status=$?" >> $GITHUB_OUTPUT
      timeout-minutes: 15

    - name: Check ML Worker status
      id: ml_worker
      continue-on-error: true
      if: always()
      run: |
        docker compose up -d ml-worker
        sleep 10
        docker compose logs ml-worker
        
        # Check if ML workers are running
        docker compose ps ml-worker
        echo "status=$?" >> $GITHUB_OUTPUT

    - name: Run full integration test
      id: full_integration
      continue-on-error: true
      if: always()
      run: |
        # Start all services
        docker compose up -d
        sleep 30
        
        # Run specific E2E tests that require full stack
        docker compose exec -T api pytest src/tests/test_e2e.py::TestE2EMLWorker -v
        echo "status=$?" >> $GITHUB_OUTPUT
      timeout-minutes: 10

    - name: Cleanup
      if: always()
      run: |
        docker compose down -v
        docker system prune -f

    - name: Collect Docker test results and create summary
      if: always()
      run: |
        echo "## 🐳 Docker Integration Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        failed_tests=""
        
        if [ "${{ steps.build.outputs.status }}" != "0" ]; then
          echo "❌ **Docker Build**: Failed to build Docker images" >> $GITHUB_STEP_SUMMARY
          echo "::warning title=Docker Build::Docker image build failed. Check build logs above."
          failed_tests="$failed_tests docker-build"
        else
          echo "✅ **Docker Build**: Images built successfully" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ steps.start_services.outputs.status }}" != "0" ]; then
          echo "❌ **Services Startup**: Failed to start services" >> $GITHUB_STEP_SUMMARY
          echo "::warning title=Services::Failed to start database, redis, or rabbitmq services."
          failed_tests="$failed_tests services"
        else
          echo "✅ **Services Startup**: All services started successfully" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ steps.docker_tests.outputs.status }}" != "0" ]; then
          echo "❌ **Docker Tests**: Tests failed in Docker environment" >> $GITHUB_STEP_SUMMARY
          echo "::warning title=Docker Tests::Tests failed when running in Docker containers."
          failed_tests="$failed_tests docker-tests"
        else
          echo "✅ **Docker Tests**: All tests passed in Docker environment" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ steps.ml_worker.outputs.status }}" != "0" ]; then
          echo "❌ **ML Worker**: ML Worker failed to start or has issues" >> $GITHUB_STEP_SUMMARY
          echo "::warning title=ML Worker::ML Worker service failed to start properly."
          failed_tests="$failed_tests ml-worker"
        else
          echo "✅ **ML Worker**: ML Worker started successfully" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ steps.full_integration.outputs.status }}" != "0" ]; then
          echo "❌ **Full Integration**: Full stack integration tests failed" >> $GITHUB_STEP_SUMMARY
          echo "::warning title=Full Integration::End-to-end tests with ML Worker failed."
          failed_tests="$failed_tests full-integration"
        else
          echo "✅ **Full Integration**: Full stack integration tests passed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -n "$failed_tests" ]; then
          echo "::warning title=Docker Test Results::Some Docker tests failed:$failed_tests"
          echo "⚠️ **Docker tests with issues:** $failed_tests" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Please review the failed Docker tests above and fix them before merging." >> $GITHUB_STEP_SUMMARY
          echo "Docker workflow completed with warnings - please address failing tests."
        else
          echo "🎉 **All Docker tests passed successfully!**" >> $GITHUB_STEP_SUMMARY
        fi 